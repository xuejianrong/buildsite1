/**
 * 资源根目录
 * @type {string}
 */

window.resourceUrl = $('<a>').attr( 'href', $('script[src*="core.min.js"]').attr('src') ).prop('origin');

/**
 * ajax请求地址数组
 * @type {object}
 */
window.AjaxBlockList = {};

/**
 * 封装的ajax
 * @returns object
 * @param aOption
 */
function ajax(aOption){
	if(typeof(aOption.url) != 'undefined'){
		aOption.url = aOption.url  + "?__r=" + Math.random();
	}
    if(!aOption.url){
        $.error('ajax方法缺少url配置');
        return null;
    }else if(AjaxBlockList[aOption.url] && !aOption['unblock']){   //禁止重复请求
        return null;
    }

    aOption.type = aOption.type || 'post';
    aOption.dataType = aOption.dataType || 'json';

    if(aOption.type == 'post'){
        var dataType, token = $('meta[name="csrf-token"]').attr('content');
        aOption.data = aOption.data || {};
        dataType = typeof(aOption.data);
        if(dataType == 'object' && aOption.data['_csrf'] == undefined){
            aOption.data['_csrf'] = token;
        }
    }

    //标志请求地址
    AjaxBlockList[aOption.url] = true;

    function processFunc(deferred){
        $.ajax(aOption).always(function(){
            //清除重复请求标志
            delete AjaxBlockList[aOption.url];
        }).done(function(data, textStatus, jqXHR){
            if(aOption.success == undefined){
                if(data['status'] == 1){
                    deferred.resolve(data, textStatus, jqXHR);
                }else{
                    deferred.reject(data, textStatus, jqXHR);
                    //UNotice.show(data['msg'], data['status']);
                }
            }
        }).fail(function(jqXHR, textStatus, errorThrown){
            //login timeout redirect
            if(jqXHR.getResponseHeader && jqXHR.getResponseHeader('X-Redirect')){
                location.href = jqXHR.getResponseHeader('X-Redirect');
            }else{
                deferred.reject(errorThrown, textStatus, jqXHR);
                //UNotice.show(errorThrown, 0);
            }
        });
    }

    return $.Deferred(processFunc).promise();
}

function serializeObject($form) {
    var obj = {}, name, value, checkboxSelect = '[type="checkbox"]';
    var array = $form.serializeArray();

    //checkbox默认为数组
    $form.find(checkboxSelect).add($form.filter(checkboxSelect)).each(function(){
        obj[this.name] = 0;
    });

    $.each(array, function() {
        name = this.name;
        value = this.value;
        if (obj[name] != undefined) {
            if(!obj[name].push){
                obj[name] = [];
            }
            obj[name].push(value);
        } else {
            obj[name] = value || '';
        }
    });
    return obj;
}

/**
 * 页面公用方法基类
 */
window.PageBase = function(){
    var _config = {
        selector: '',       //容器选择器
        template: '',       //模板
        templateUrl: ''    //模板url
    };

    this.config = function(args){
        for (var key in args) {
            if (args.hasOwnProperty(key)) {
                _config[key] = args[key];
            }
        }
    };

    this.show = function(){
        var self = this;
        if(self.getConfig('template')){
            self.initPage();
            self.validateForm();
            return;
        }

        var templateUrl = self.getConfig('templateUrl');
        if(templateUrl){
            $.get(templateUrl, function(html){
                self.setTemplate(html);
                self.initPage();
                self.validateForm();
            });
        }
    };

    this.hide = function(){
        this.root().empty();
    };

    this.initPage = function(){
        var self = this;
        var selector = self.getConfig('selector');
        var template = self.getConfig('template');
        $(template).appendTo($(selector));
    };

    /**
     * 获取配置数据
     * @param  {[type]} key [description]
     * @return {[type]}     [description]
     */
    this.getConfig = function(key){
        return _config[key];
    };

    /**
     * 设置模板数据
     * @param {[type]} html [description]
     */
    this.setTemplate = function(html){
        _config['template'] = html;
    };

    this.getTemplate = function(){
        return _config['template'];
    };

    /**
     * 获取根路径
     * @returns {jQuery|HTMLElement}
     */
    this.root = function() {
        return $(_config['selector']);
    };

    this.validateForm = function(){
        $('form').attr('novalidate', 'novalidate').on('click','button,input[type="submit"]', function(){
            var message = '';
            $(this).parents('form').find('input:visible').each(function(){
                if(!this.validity.valid){
                    if(!this.value){    //没有值提示placholder
                        message = this.placeholder || this.title;
                    }else if(this.validity.patternMismatch){    //正则不匹配，提示title
                        message = this.title;
                    }else if(this.validity.customError){    //自定义错误提示提示错误信息
                        message = this.validationMessage;
                    }else{  //其它情况提示title 或者 错误信息
                        message = this.title || this.validationMessage;
                    }
                    if(message){
                        return false;
                    }
                }
            });
            if(message){
                UNotice.show(message, -1);
                return false;
            }
        });
    }
};
/**
 * 复制子节点
 * @param select
 * @param len
 * @param $root
 * @param isDeep
 * @returns {*|{}}
 * @private
 */
window.PageBase.cloneChild = function(select, len, $root, isDeep) {
    if(len == 0){
        return $([]);
    }
    var $items = $root.find(select), $last = $items.last(), $temp;
    if (!$items[0]) {
        $.error('select ' + select + ' without element!');
        return false;
    }
    for (var i = 0; i < len; ++i) {
        if (!$items[i]) {
            $temp = $last.clone(isDeep);
            $last.after($temp);
            $last = $temp;
        }
    }
    $items.slice(i).remove();
    return $root.find(select);
};
/**
 * 复制子节点
 * @param $items    子节点jQuery对象
 * @param len       数组长度
 * @param reuse     是否复用
 * @param isDeep    复制事件
 * @returns {*|{}}
 * @private
 */
window.PageBase.cloneItem = function($items, len, reuse, isDeep){
    if (!$items || $items.length == 0) {
        $.error('select without element!');
        return false;
    }else if(len == 0){
        return $([]);
    }

    var $temp, defLen = $items.length, $last = $items.last();
    for (var i = 0; i < len; ++i) {
        if($items[i] && reuse){ //复用并且已存在
            continue
        }
        $temp = $last.clone(isDeep);
        $last.after($temp);
        $last = $temp;
        $items.push($temp);
    }

    if(reuse){
        $items.slice(i).remove();
        return $items.slice(0, i);
    }else{
        return $items.slice(defLen);
    }
};
//扩展页面方法
window.PageBase.init = function(page){
    page.prototype = new window.PageBase();
    page.prototype.constructor = page;
    page.prototype.cloneChild = window.PageBase.cloneChild;
    page.prototype.cloneItem = window.PageBase.cloneItem;
    return page;
};
//获取页面实例
window.PageBase.create = function(){
    var oPage = window.PageBase.init(function(){});
    return new oPage();
};

(function($, win){
    win.AppObject = {
		isGuest : 1,
		url : {
			resource : ''
		},
		inited : false,	//是否已经初始化
		oCurrentUser: null,
		isNative: window.AndroidSDK ? window.AndroidSDK.isInstalled() : false,		//是否app端
		isComputer: !new RegExp('iPhone|Android').test(navigator.userAgent), 	//是否PC端
		isIos: new RegExp('\\(i[^;]+;( U;)? CPU.+Mac OS X').test(navigator.userAgent),

		//配置
		config : function(aConfig){
			aConfig = $.extend({
				url : {
					resource : ''
				}
			}, aConfig);

			if(aConfig.url){
				$.extend(self.url, aConfig.url);
				if(self.url.resource.substr(-1) != '/'){
					//resource地址自动加上/号结尾
					self.url.resource += '/';
				}
			}

			var aRootKeys = ['isGuest', 'oCurrentUser'];
			for (var i in aRootKeys) {
				var key = aRootKeys[i];
				if(typeof(aConfig[key]) == 'undefined'){
					continue;
				}
				self[key] = aConfig[key];
			}

			self.inited = true;
		},

		/**
		 * 获取URL
		 * @param {type} pageName 标识符
		 * @returns String URL字符串
		 */
		getUrl : function(key){
			if(self.url[key] != undefined){
				return self.url[key];
			}else{
				return '';
			}
		},

		/**
		 * 导入URL列表
		 * @param {type} aUrlList
		 */
		importUrl : function(aUrlList){
			for(var pageName in aUrlList){
				self.url[pageName] = aUrlList[pageName];
			}
		}
	};

	win.App = win.AppObject;	//增加App别名
	var self = win.AppObject;
	//$.extend(self, new Component());
})(jQuery, window);